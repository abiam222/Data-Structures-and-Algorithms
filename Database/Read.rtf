{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red220\green161\blue13;}
{\*\expandedcolortbl;;\cssrgb\c89412\c68627\c3922;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid102\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\partightenfactor0

\f0\b\fs34 \cf0 DB, Databases / SQL/ NoSql\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 \
\pard\pardeftab560\sa40\partightenfactor0

\f0\b\fs28 \cf0 SQL\
\pard\pardeftab560\slleading20\partightenfactor0

\fs24 \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 -Since this isn\'92t my day to day just make sure you know the basics and can do general queries\
-I have an amazing SQL book in kindle to do SQL query problems \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8259 	}I also have SQL Best practices in \'93Back-end\'94\
\ls1\ilvl0{\listtext	\uc0\u8259 	}And DB Photos in \'93Back-end\'94\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
Sites:\
\pard\pardeftab560\slleading20\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.guru99.com/sql-interview-questions-answers.html"}}{\fldrslt \cf2 \ul \ulc2 https://www.guru99.com/sql-interview-questions-answers.html}}\ul \
\pard\pardeftab560\slleading20\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://medium.com/@kimtnguyen/relational-database-schema-design-overview-70e447ff66f9"}}{\fldrslt \cf2 \ulc2 https://medium.com/@kimtnguyen/relational-database-schema-design-overview-70e447ff66f9}}\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \ulnone \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl0
\f2\fs20 \cf0 {\listtext	\uc0\u8226 	}
\f1\fs24 Find a book that you can do sql problems (queries) \
\ls2\ilvl0
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Explain SQL, the purpose and etc \
\ls2\ilvl0
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Explain the following\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl1
\f2\fs20 \cf0 {\listtext	\uc0\u8226 	}
\f1\fs24 What is aggregation (functions)\
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Best practices for sql \
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Data Integrity \
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 ACID\
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Normal Form, Denormalization (know the 3)\
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Junction \
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Joins\
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Indexes \
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Performance\
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Stored Procedure \
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Trigger\
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Delete vs Truncate\
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Constraint \
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Cluster index\
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 Datawarehouse \
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 ALIAS\
\ls2\ilvl1
\f2\fs20 {\listtext	\uc0\u8226 	}
\f1\fs24 SQL vs NoSQL vs Other types of databases \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
\pard\pardeftab560\sa40\partightenfactor0

\fs28 \cf0 Query\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0\fs24 \cf0 	
\f0\b Where
\f1\b0  \
		=, !=, <>, >, <, >=, <=, BETWEEN (between range), LIKE (search pattern), IN (multiple Val\'92s in col)(Instead of using many AND\'92s you can use this), AND, OR, NOT, EXISTS - return true if subquery returns one or more records, 			ANY, ALL\
	\
	
\f0\b ORDER BY\
		
\f1\b0 ASC, DESC.  e.g.  order by country ASC | DESC\
	\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 	GROUP BY\
	 	
\f1\b0 Used with aggregate functions  To group the result set by one or more col \
\
	
\f0\b HAVING \
		
\f1\b0 was added to sql because WHERE clause could not be used with aggregate functions, ANY, ALL \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 	
\f0\b Aggregate Functions \
		
\f1\b0 MIN, MAX, COUNT - total rows, AVG, SUM - total sum values. Also other func(idk if they are agg) but CONCAT, PI,                               		CONVERTS. etc\
\
Questions from the book I\'92m reading \
0*SQL Problems 57 beginning, intermediate, advanced \
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Definitions and etc:\
\
INNER JOIN - returns records that have matching values in both tables\
LEFT JOIN - returns all records form the left table, and the matched records from the right table\
RIGHT JOIN - returns all records form the right table, and the matched records from the left table\
FULL JOIN (OUTTER) - Returns all records when there is a match in either left or right table \
\
The Union Operator is used to combine the result-set of two or more SELECT statements\
SELECT <column_name> from table\
UNION (ADD "UNION ALL" to allow duplicates)\
SELECT <column_name> from table2\
\
Index: Are used to retrieve data from the DB very fast.  (slow on update though )\
CREATE INDEX <index_name>           (UNIQUE IF YOU WANT NO DUPLICATES)\
ON <table_name> (col1, col2,...)\
\
SELECT *\
FROM Table WITH(INDEX(Index_Name))\
\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
Normalization:
\f1\b0 \
\
Database normalization is the process of structuring a \
relational database in accordance with a series of so-called normal \
forms in order to reduce data redundancy and improve data integrity. \
It was first proposed by Edgar F. Codd as part of his relational model.\
\
1NF: Eliminate repeating groups in individual tables\
Create Separate table for each set of related data\
Identify each set of related data with a primary key.\
Each recored need to be unique \
\
\
2NF: Put simply, a relation is in 2NF if it is in 1NF and every non-prime\
attribute of the relation is dependent on the whole of every candidate key.\
Single column primary key (foreign key and primary keys )\
\
\
3NF: is a normal form that is used in normalizing a database design to reduce the duplication \
of data and ensure referential integrity by ensuring that:-\
\
\
\

\f0\b ACID
\f1\b0 \
Atomicity - transactions are often composed of multiple statements\
Consistency - ensures that a transaction can only bring the DB from one valid state to another \
Isolation - transactions are often executed concurrently. Isolation ensures that concurrent execution\
of transaction leaves the DB in the same state that would have been obtrained if the transactions\
were executed sequentially. \
Durability - guarentees that once a transaction has been committed, it will remain even in the \
case of a system failure \
\
\
\
}