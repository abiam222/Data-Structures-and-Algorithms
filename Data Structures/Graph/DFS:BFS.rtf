{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\partightenfactor0

\f0\b\fs34 \cf0 DFS (stacks) and BFS (queues), RECURSION\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b0\fs24 \cf0 \
\
\
\pard\pardeftab560\partightenfactor0

\f2\fs26 \cf0 void preOrder(node *root) \{\
    if ( root != NULL) \{\
        cout << root->data << " ";\
        preOrder(root->left);\
        preOrder(root->right);\
    \}\
\}\
\
\
\
void postOrder(node *root) \{\
    if (root != NULL) \{\
        postOrder(root->left);\
        postOrder(root->right);\
        cout << root->data << " ";\
    \}\
\}\
\
\
\
void Inorder(node *root) \{\
          \
    if (root != NULL)\{\
      \
        Inorder(root->left);\
        cout << root->data << " ";\
        Inorder(root->right);\
          \
    \}\
    \
\}\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 //////////////////////////////////////////////////////////////////////////////////////////////////\
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\partightenfactor0

\f2\fs26 \cf0 #include <iostream>\
#include <queue>\
\
using namespace std;\
\
void setupGraph();\
void DFS();\
void DFSsearch(int i, bool V[]);\
void BFS();\
void BFSsearch(int i, bool V[]);\
\
\pard\pardeftab560\partightenfactor0

\f3\i \cf0 //write herer big oh notattion for BFS and DFS
\f2\i0 \
\
#define N  8\
bool G[N][N];
\f3\i //// the graph as an adjacency matrix\'a0\'a0
\f2\i0 \
\
int main()\{\
\
\'a0\'a0\'a0\'a0setupGraph();\
\'a0\'a0\'a0\'a0cout << "------------------------" << endl << endl;\
\
\'a0\'a0\'a0\'a0DFS();\
\
    cout << "------------------------" << endl << endl;\
    BFS();\
\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0return 0;\
\}\
\
\
void setupGraph()\{\
\
\'a0\'a0\'a0\'a0
\f3\i // set up a graph with 8 vertices + 3 components that looks like:
\f2\i0 \
        
\f3\i /*
\f2\i0 \

\f3\i             0 --- 1        5---6
\f2\i0 \

\f3\i             | \\    \\       |  /
\f2\i0 \

\f3\i             |  \\    \\      | /
\f2\i0 \

\f3\i             2   3----4     7
\f2\i0 \

\f3\i         */
\f2\i0 \
\
        
\f3\i // notice that for each edge G[i][j] == G[j][i]
\f2\i0 \
        
\f3\i // this means that the graph is undirected. Also can be true,false
\f2\i0 \
        
\f3\i //or 1,0
\f2\i0 \
       
\f3\i // int N 
\f2\i0 \
\
        G[0][1]=G[1][0]=true; G[0][2]=G[2][0]=true; G[0][3]=G[3][0]=true;\
        G[1][4]=G[4][1]=true; G[3][4]=G[4][3]=true; G[5][6]=G[6][5]=true;\
        G[5][7]=G[7][5]=true; G[6][7]=G[7][6]=true;\
\
        
\f3\i /*for(int i=0;i<N;i++)\{
\f2\i0 \

\f3\i         \'a0\'a0\'a0\'a0cout << "" << endl;
\f2\i0 \

\f3\i         \'a0\'a0\'a0\'a0for(int j=0;j<N;j++)\{
\f2\i0 \

\f3\i         \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0cout << G[i][j];
\f2\i0 \

\f3\i         \'a0\'a0\'a0\'a0\}
\f2\i0 \

\f3\i         \}*/
\f2\i0 \
\
\}\
\
\
\
void DFS()\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f3\i // a visited array to mark which vertices have been visited in DFS
\f2\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0bool V[N];\
\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f3\i //initialize to false
\f2\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for(int i=0;i<N;i++)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0V[i] = false;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0int component=0;\
\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f3\i // do the DFS from each node not already visited
\f2\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f3\i //we're visiting everything for a total of N times
\f2\i0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for (int i=0; i<N; ++i)\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0if(!V[i])\{ \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0component++;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0cout << "DFS for component " << component << " starting at node " << i << endl;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0DFSsearch(i,V);\
 \'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 cout << "Finished DFS - found " << component << " Components" << endl;\
\}\
\
\
\
void DFSsearch(int currNode, bool V[])\{\
\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0cout << "At node " << currNode  << " in DFS" << endl;\
\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0V[currNode] = true;\
\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f3\i // recursively visit every node connected yet to be visited
\f2\i0 \
        for (int i=0; i<N; i++)\{\
            if (G[currNode][i] && !V[i])\
            \{\
                cout << "Going to node " << i << " ... ";\
                DFSsearch(i,V);\
            \}\
    \}\
     cout << "Done processing node " << currNode << endl;\
\
\}\
\
\
\
void BFS()\{\
        
\f3\i // a visited array to mark which vertices have been visited in BFS
\f2\i0 \
        bool V[N];\
\
        
\f3\i //initialize to false
\f2\i0 \
        for(int i=0;i<N;i++)\{\
            V[i] = false;\
        \}\
        \
        int component=0;\
\
        
\f3\i // do the BFS from each node not already visited
\f2\i0 \
        
\f3\i //we're visiting everything for a total of N times
\f2\i0 \
         for (int i=0; i<N; ++i)\{\
                if(!V[i])\{ \
                    component++;\
                    cout << "BFS for component " << component << " starting at node " << i << endl;\
                    BFSsearch(i,V);\
                \}\
             \}\
         cout << "Finished BFS - found " << component << " Components" << endl;\
\}\
\
\
\
void BFSsearch(int start, bool V[])\{\
\
        queue<int> nodes;\
\
        nodes.push(start);\
        V[start] = true;\
\
        while(!nodes.empty())\
        \{\
            int head = nodes.front();\
            nodes.pop();\
            cout << "At node " << head  << " in BFS" << endl;\
\
        
\f3\i // recursively visit every node connected yet to be visited
\f2\i0 \
        for (int i=0; i<N; i++)\{\
            if (G[head][i] && !V[i])\
            \{\
                nodes.push(i);\
                V[i] = true;\
                cout << "Adding node " << i << " to the queue in the BFS" << endl;\
                \
            \}\
    \}\
     cout << "Done processing node " << head << endl;\
 \}
\f3\i //end while
\f2\i0 \
    cout << "Finished with the BFS from start node " << start << endl; \
\
\}\
}